---
layout: post
title: PUPPET on EC2
date: 2012-06-26 13:45:00.000000000 +05:30
type: post
parent_id: '0'
published: true
password: ''
status: publish
categories: []
tags: []
meta:
  blogger_blog: ijuned.blogspot.com
  blogger_7553295648c4d8ebded8b8484926da00_permalink: '1002653215352263490'
---
<div dir="ltr" style="text-align:left;">PUPPET on Amazon EC2 (UBUNTU Machines)</p>
<p><span class="IL_AD" id="IL_AD9">Introduction<span class="IL_AD_ICON"></span></span>:<br />Puppet is a system for automating <span class="IL_AD" id="IL_AD10">system administration<span class="IL_AD_ICON"></span></span> tasks. In the Puppet world, you define a policy (called a manifest) that <span class="IL_AD" id="IL_AD1">describes<span class="IL_AD_ICON"></span></span> the end state of your systems, and the Puppet software takes care of  making sure the system meets that end state. If a file changes, it is  replaced with a pristine copy. If a required package is removed, it is  re-installed.<br />The Puppet system is split into two parts: a central  server and the clients. The server runs a demon called puppetmaster. The  clients run puppetd, which both connects to, and receives connections  from, the puppetmaster. The manifest is written on the puppetmaster. If  Puppet is used to manage the central server, it also runs the puppetd  client.</p>
<p>  </p>
<p>Prerequisite:   Before we proceed we need to have few settings in place. <br />1.   Enable  ICMP on security group in which the client and server reside, so that  ec2 instances can communicate/ reply to ping request. This is major  requirement in <span class="IL_AD" id="IL_AD4">troubleshooting<span class="IL_AD_ICON"></span></span> while configuring. <br />2.   In  order for the puppet server and the puppet client(s) to be able to  communicate you should ensure that port 8140 is open between the  systems.<br />3.   <span class="IL_AD" id="IL_AD5">Domain names<span class="IL_AD_ICON"></span></span>- Prior to configuring puppet you may want to add a DNS record for <span class="IL_AD" id="IL_AD7">puppet master<span class="IL_AD_ICON"></span></span> and for puppet client So that can communicate with each other.<br /> In  current minimal setup we are not using any DNS server. Instead we used  /etc/hosts file to map hostname of client and server of Puppet</p>
<p>Below is the snippet of /etc/hosts file on both client and server </p>
<p>ubuntu@ip-10-205-2-127:~$ cat /etc/hosts<br />127.0.0.1 localhost<br />10.205.2.127 puppet.juned.com puppet<br />10.245.74.141 clinet.juned.com client</p>
<p># The following lines are desirable for IPv6 capable hosts<br />#::1 ip6-localhost ip6-loopback<br />#fe00::0 ip6-localnet<br />#ff00::0 ip6-mcastprefix<br />#ff02::1 ip6-allnodes<br />#ff02::2 ip6-allrouters<br />#ff02::3 ip6-allhosts<br />?<br />Puppet Server Installation and configuration:</p>
<p><span class="IL_AD" id="IL_AD11">Install<span class="IL_AD_ICON"></span></span> puppet master <br />apt-get install puppetmaster</p>
<p>Create Your Site Manifest file :<br />Puppet  will start with /etc/puppet/manifests/site.pp as the primary manifest,  so create /etc/puppet/manifests and add your manifest, along with any  files it includes, to that directory. It is highly recommended that you  use some form of version control (git, svn, etc) to keep track of  changes to manifests.</p>
<p>Example Manifest file, <br />package {<br />'apache2':<br />ensure =&gt; installed<br />}<br />service {<br />'apache2':<br />ensure =&gt; true,<br />enable =&gt; true,<br />require =&gt; Package['apache2']<br />}</p>
<p>Next, create a node file /etc/puppet/manifests/nodes.pp with:<br />node ' clinet.juned.com ' {<br />include apache2<br />}<br />And now restart the puppet master <br />/etc/init.d/puppetmaster restart<br />Puppet Client (node) Installation and configuration:<br />apt-get install puppet<br />First, configure the puppet agent daemon to start. Edit /etc/default/puppet, changing START to<br />yes:<br />and now start the puppet client.<br />/etc/init.d/puppet start</p>
<p>Now Edit file /etc/puppet/puppet.conf<br />Add line server= puppet.juned.com<br />?<br />Verifying Installation<br />Once  Puppet is installed on that machine, run the agent against the central  server to verify that everything is working appropriately. You should  start the agent in verbose mode the first time and with the  --waitforcert flag enabled:<br />Run this command from client node,<br />puppetd --server  puppet.juned.com --waitforcert 60 --test<br /> On your server, list the waiting certificates <br />puppetca –list<br />You should see the name of the test agent node. Now go ahead and sign <span class="IL_AD" id="IL_AD3">the certificate<span class="IL_AD_ICON"></span></span>, then sign the certificate.<br />puppetca --sign  ip-10-245-74-141<br />That Request is accepted by puppet master and you can verify that on client end apche2 package is going to install you can also verify it by using tail –f /var/log/syslog</p>
<p>?<br />Pros and Cons of Puppet<br />Pros:<br />1.   Automation of System Administration:  <br />Puppet  lets you perform normal administrative tasks (such as adding users,  installing packages, and updating server configurations) by saving you  countless hours of frustration, monotony, and/or reinventing the wheel  on any number of systems, even if those systems are running completely  different operating system.</p>
<p>2.   Security:<br />•   Thorough  security model (each client has its own SSL cert) Puppet comes with  tools to make basic SSL setup and cert generation very painless  (puppetca) <br />•   Each client only gets to see the part of the site config that applies to it, not the whole site config<br />•   Builtin <span class="IL_AD" id="IL_AD6">file server<span class="IL_AD_ICON"></span></span> where file access can be secured per-client (e.g. only hostX gets access to hostX/ssh_host_key)</p>
<p>3.   Cross Platform:<br />works on most flavors of Unix/Linux (Fedora/RHEL/Debian/Gentoo, Solaris, OS X, some sort of *BSD)</p>
<p>4.   Domain-specific language for manifest :<br />•   Clean abstraction from messy details of changing config <br />•   <span class="IL_AD" id="IL_AD2">Describe<span class="IL_AD_ICON"></span></span> desired config of system, puppet figures out how to get there (e.g.,  you say 'need user X with homedir /foo and uid N', puppet figures out  appropriate calls to useradd/usermod depending on whether user exists  and fixes attributes that are out of sync) <br />•   Abstraction: describe config in high-level terms (user, service, package, mount) for common config <span class="IL_AD" id="IL_AD8">objects<span class="IL_AD_ICON"></span></span> <br />•   Templating support for things that can't/don't need to be described as objects; or distribute complete files<br />•   Group config items logically with classes: can describe  that a webserver has to have latest httpd package, service httpd  enabled and running, and custom httpd.conf file from location X (that's  not possible with at least one of the other config mgmt tools) <br />•   Override  mechanism for classes to allow for simple one-off (or hundred-off)  tweaks, e.g. to take webserver class from above but use with different  httpd.conf * Clean definition of what inputs can influence a client's  config </p>
<p>5.   Emphasis on practical usability, not research.<br />6.   Cron-like support for scheduling tasks.<br />7.   Tie-in with kickstart: provision basic system with ks (including puppet client), complete config with puppet.<br />8.   Strong community support<br />9.   Open source and free software</p>
<p>Cons:<br />1.   All sysadmins are not programmer:<br />   Ruby programming language is puppet's implementation language and we sysadmins are not familiar with Ruby.</p>
<p>2.   Puppet has its own language for configuration purpose and that one need to learn to configure puppet.  <br />3.   Puppet is a new software so not sure about count of servers and workstations efficiently managed by puppet.</div>
